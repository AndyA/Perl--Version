#!/usr/bin/perl
#
#  perl-reversion
#
# Update embedded version strings in Perl source

use strict;
use warnings;
use Perl::Version;
use Getopt::Long;
use Pod::Usage;
use File::Spec;

# use Fcntl ':mode';
# use File::Find::Parallel;

my $VERSION_RE = Perl::Version::REGEX;

# Files that suggest that we have a project directory. The scores next
# to each are summed for each candidate directory. The first directory
# with a score >= 1.0 is assumed to be the project home.

my %PROJECT_SIGNATURE = (
    'Makefile.PL' => 0.4,
    'Build.PL'    => 0.4,
    'MANIFEST'    => 0.4,
    't/'          => 0.4,
    'lib/'        => 0.4,
    'Changes'     => 0.4,
);

# Places to look for files / directories when processing a project

my %CONSIDER = ( 'lib/' => $MODULE_RE, 'README' );

# Maximum number of levels above current directory to search for
# project home.

my $MAX_UP = 5;

# Directories to skip during expansion
my $SKIP = qr{^ [.]svn | CVS | [.]DS_Store $}x;

my $man     = 0;
my $help    = 0;
my $verbose = 0;

GetOptions(
    'help|?' => \$help,
    'man'    => \$man,
    'v'      => \$verbose,
) or pod2usage( 2 );

pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;

#pod2usage( 2 ) unless @ARGV > 1;    # Need two directories

my @files = @ARGV ? expand_dirs( @ARGV ) : find_proj_files();

die "Can't find any files to process\n"
  unless @files;

print join( "\n", @files ), "\n";

sub find_proj_files {
    if ( my $dir = find_project( File::Spec->curdir ) ) {
        return $dir;
    }
    else {
        die "No files / directories specified and I can't\n"
          . "find a directory that looks like a project home.\n";
    }
}

sub expand_dirs {
    return expand_dirs_matching( qr{}, @_ );
}

sub expand_dirs_matching {
    my $match = shift;
    my @work  = @_;
    my @out   = ();
    while ( my $obj = shift @work ) {
        if ( -d $obj ) {
            opendir my $dh, $obj or die "Can't read directory $obj ($!)\n";
            push @work, map { File::Spec->catdir( $obj, $_ ) }
              grep { $_ !~ $SKIP }
              grep { $_ !~ /^[.][.]?$/ } readdir $dh;
            closedir $dh;
        }
        elsif ( $obj =~ $match ) {
            push @out, $obj;
        }
    }

    return @out;
}

sub find_dir_like {
    my $start     = shift;
    my $max_up    = shift;
    my $signature = shift;

    for ( 1 .. $max_up ) {
        my $score = 0;
        while ( my ( $file, $weight ) = each %$signature ) {
            $score += $weight
              if (
                ( $file =~ m{^(.+)/$} )
                ? -d File::Spec->catdir( $start, $1 )
                : -f File::Spec->catfile( $start, $file )
              );
        }
        return File::Spec->canonpath( $start ) if $score >= 1.0;
        $start = File::Spec->catdir( $start, File::Spec->updir );
    }

    return;
}

# Find the project directory
sub find_project {
    return find_dir_like( shift, $MAX_UP, \%PROJECT_SIGNATURE );
}

sub version_re_perl {
    my $ver_re = shift;

    return qr{ ^ ( .*?  [\$\*] (?: \w+ (?: :: | ' ) )* VERSION \s* = \s* ) 
                 $ver_re 
                 ( .* ) $ }x;
}

sub version_re_pod {
    my $ver_re = shift;

    return qr{ ^ ( .*? (?i: version ) .*? ) $ver_re ( .* ) $ }x;
}

sub parse_version {
    my ( $self, $parsefile ) = @_;
    my $result;
    local *FH;
    local $/ = "\n";
    local $_;
    open( FH, $parsefile )
      or die "Could not open '$parsefile': $!";
    my $inpod = 0;
    while ( <FH> ) {
        $inpod = /^=(?!cut)/ ? 1 : /^=cut/ ? 0 : $inpod;
        next if $inpod || /^\s*#/;
        chop;
        next unless /(?<!\\)([\$*])(([\w\:\']*)\bVERSION)\b.*\=/;
        my $eval = qq{
	    package ExtUtils::MakeMaker::_version;
	    no strict;

	    local $1$2;
	    \$$2=undef; do {
		$_
	    }; \$$2
	};
        local $^W = 0;
        $result = eval( $eval );
        warn "Could not eval '$eval' in $parsefile: $@" if $@;
        last;
    }
    close FH;

    $result = "undef" unless defined $result;
    return $result;
}

__END__

=head1 NAME

perl-reversion - Replace duplicate files with hard links

=head1 SYNOPSIS

perl-reversion [options] [dir1 dir2 ...]

 Options:

    -help          see this summary
    -man           view man page for perl-reversion
    -v             verbose mode

=head1 DESCRIPTION

Given a number of directories that are (partial) copies of each other
replace files that are shared between them with hard links to a
single file.

No attempt is made to verify that the files' contents match. The most
recently modified file is chosen as the version to be linked to.

=head1 EXAMPLES

    # Make sure that files shared between cpan and backpan mirrors are
    # hard links to a single file.
    perl-reversion /usr/share/cpan /usr/share/backpan

=head1 AUTHOR

Andy Armstrong  C<< <andy@hexten.net> >>

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2007, Andy Armstrong C<< <andy@hexten.net> >>. All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.
